@using Freelancer.MVC.Models
@model IEnumerable<Freelancer.Models.Skill>

@{
    ViewBag.Title = "Create project";
    var project = new Freelancer.MVC.Models.ProjectCreateModel();
}

<div class="section-title">
    <div class="">@ViewBag.Title</div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => project.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => project.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => project.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => project.Description, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.TextAreaFor(model => project.Description, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => project.Description, "", new {@class = "text-danger"})
            </div>
        </div>

        <input type="text" name="query" class="query"/>

        <div class="form-group">
            @Html.LabelFor(model => project.StartPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => project.StartPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => project.StartPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => project.EndPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => project.EndPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => project.EndPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => project.DueDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => project.DueDate, new { htmlAttributes = new { @class = "form-control", @id = "datepicker" } })
                @Html.ValidationMessageFor(model => project.DueDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<script>
    $(function () {
        var availableTags,
            outputTags = [],
            showPopup = function(tags) {
                $.each(tags, function (_, v) {
                    if (v.Name.indexOf($(".query").val()) > -1) {
                        outputTags.push(v.Name);
                    }
                });

                $(".query").autocomplete({
                    source: outputTags
                });

                $(".ui-autocomplete")
                    .css({
                        height: "300px",
                        overflow: "auto"
                    });
            };

        $(document).on("keyup", ".query", function () {
            if (!availableTags) {
                $.ajax({
                    url: "http://localhost:24272/Skills/Search/",
                    type: "GET",
                    success: function(result) {
                        availableTags = result;

                        showPopup(availableTags);
                    }
                });
            } else {
                showPopup(availableTags);
            }
        });
    });
    
    $(document).ready(function () {
        $startPriceInput = $("#project_StartPrice");
        $endPriceInput = $("#project_EndPrice");
        $startPriceMessage = $("span[data-valmsg-for='project.StartPrice']");

        $startPriceInput.change(function () {
            compareInputs();
        });
        
        $endPriceInput.change(function () {
            compareInputs();
        });

        function compareInputs()
        {
            if (parseInt($startPriceInput.val()) > parseInt($endPriceInput.val())) {
                $startPriceMessage.text("Start Price must be less than End Price");
                $endPriceMessage.text("End Price must be greater than Start Price");
            } else {
                $startPriceMessage.text("");
            }
        }
    }())
</script>
