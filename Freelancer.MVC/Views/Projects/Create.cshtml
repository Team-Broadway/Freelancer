@model IEnumerable<Freelancer.Models.Skill>

@{
    ViewBag.Title = "Create project";
    var project = new Freelancer.MVC.Models.ProjectCreateModel();
}

<div class="section-title">
    <div class="">@ViewBag.Title</div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => project.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => project.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => project.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => project.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => project.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => project.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => project.Skills, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="skillsList">
                    @foreach (var skill in Model)
                    {
                        <div class="row">
                            <div class="col-xs-10">
                                <input type="checkbox" name="SelectedSkills" value="@skill.Id"> @skill.Name
                            </div>
                        </div>
                    }
                </div>
                @*@Html.TextAreaFor(model => project.Skills, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => project.Skills, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => project.StartPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => project.StartPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => project.StartPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => project.EndPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => project.EndPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => project.EndPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => project.DueDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => project.DueDate, new { htmlAttributes = new { @class = "form-control", @id = "datepicker" } })
                @Html.ValidationMessageFor(model => project.DueDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    $(document).ready(function () {
        $startPriceInput = $("#project_StartPrice");
        $endPriceInput = $("#project_EndPrice");
        $startPriceMessage = $("span[data-valmsg-for='project.StartPrice']");

        $startPriceInput.change(function () {
            compareInputs();
        });
        
        $endPriceInput.change(function () {
            compareInputs();
        });

        function compareInputs()
        {
            if (parseInt($startPriceInput.val()) > parseInt($endPriceInput.val())) {
                $startPriceMessage.text("Start Price must be less than End Price");
                $endPriceMessage.text("End Price must be greater than Start Price");
            } else {
                $startPriceMessage.text("");
            }
        }

    }())
</script>